BSmooth.fstat <- function(BSseq, designMat, contrasts,
                          local.correct = TRUE, maxGap = NULL, qSd = 0.75, k = 101, mc.cores = 1, verbose = TRUE){
  smoothSd <- function(Sds, k) {
    k0 <- floor(k/2)
    if(all(is.na(Sds))) return(Sds)
    thresSD <- pmax(Sds, quantile(Sds, qSd, na.rm = TRUE), na.rm = TRUE)
    addSD <- rep(median(Sds, na.rm = TRUE), k0)
    sSds <- as.vector(runmean(Rle(c(addSD, thresSD, addSD)), k = k))
    sSds
  }
  compute.correction <- function(idx, qSd = 0.75) {
    xx <- start(BSseq)[idx]
    yy <- fstat[idx]
    suppressWarnings({
      drange <- diff(range(xx, na.rm = TRUE))
    })
    if(drange <= 25000)
      return(yy)
    fstat.function <- approxfun(xx, yy)
    xx.reg <- seq(from = min(xx), to = max(xx), by = 2000)
    yy.reg <- tstat.function(xx.reg)
    fit <- locfit(yy.reg ~ lp(xx.reg, h = 25000, deg = 2, nn = 0),
                  family = "huber", maxk = 50000) 
    correction <- predict(fit, newdata = data.frame(xx.reg = xx))
    yy - correction 
  }
  
  stopifnot(is(BSseq, "BSseq"))
  stopifnot(hasBeenSmoothed(BSseq))
  if(any(attributes(design)$assign == 0)){
    stop("Change design matrix to group means design")
  }
#   if(is.character(group1)) {
#     stopifnot(all(group1 %in% sampleNames(BSseq)))
#     group1 <- match(group1, sampleNames(BSseq))
#   }
#   if(is.numeric(group1)) {
#     stopifnot(min(group1) >= 1 & max(group1) <= ncol(BSseq))
#   } else stop("problems with argument 'group1'")
#   if(is.character(group2)) {
#     stopifnot(all(group2 %in% sampleNames(BSseq)))
#     group2 <- match(group2, sampleNames(BSseq))
#   }    
#   if(is.numeric(group2)) {
#     stopifnot(min(group2) >= 1 & max(group2) <= ncol(BSseq))
#   } else stop("problems with argument 'group2'")
#   stopifnot(length(intersect(group1, group2)) == 0)
#   stopifnot(length(group1) > 0)
#   stopifnot(length(group2) > 0)
#   stopifnot(length(group1) + length(group2) >= 3)
#   if(estimate.var == "paired")
#     stopifnot(length(group1) == length(group2))
  
#   if(any(rowSums(getCoverage(BSseq)[, c(group1, group2)]) == 0))
#     warning("Computing t-statistics at locations where there is no data; consider subsetting the 'BSseq' object first")

  if(is.null(maxGap))
    maxGap <- BSseq@parameters$maxGap
  if(is.null(maxGap))
    stop("need to set argument 'maxGap'")
  
  if(verbose) cat("[BSmooth.fstat] preprocessing ... ")
  ptime1 <- proc.time()
  clusterIdx <- makeClusters(BSseq, maxGap = maxGap)
  ptime2 <- proc.time()
  stime <- (ptime2 - ptime1)[3]
  if(verbose) cat(sprintf("done in %.1f sec\n", stime))
  
  if(verbose) cat("[BSmooth.fstat] computing variation between groups ... ")
  ptime1 <- proc.time()
  allPs <- getMeth(BSseq, type = "smooth", what = "perBase",
                   confint = FALSE)
  fit <- lmFit(allPs, design)
  coef <- fit$coef
  n_i <- colSums(design)
  N <- sum(n_i)
  getSS_b <- function(groupMeans){
    GM <- sum(n_i * groupMeans)/N
    SS_b <- sum(n_i * (groupMeans - GM) ^ 2)
    SS_b
  }
  SS_b <- apply(coef, 1, getSS_b)
  MS_b <- SS_b/(ncol(design) - 1)
  ptime2 <- proc.time()
  stime <- (ptime2 - ptime1)[3]
  if(verbose) cat(sprintf("done in %.1f sec\n", stime))
  
  if(verbose) cat("[BSmooth.fstat] computing variation within groups ... ")
  ptime1 <- proc.time()
  contrast.matrix <- makeContrasts(contrasts = contrasts, levels = design)
  fit2 <- contrasts.fit(fit, contrast.matrix)
  fit2 <- eBayes(fit2, trend = T)
  eBayesSds <- fit2$s2.post
  smoothSds <- do.call(c, mclapply(clusterIdx, function(idx) {
     smoothSd(eBayesSds[idx], k = k)
  }, mc.cores = mc.cores))
  SS_w <- smoothSds * fit2$df.total
  MS_w <- smoothSds
  fstat <- MS_b/MS_w
#   switch(estimate.var,
#          "group2" = {
#            rawSds <- rowSds(allPs[, group2, drop = FALSE], na.rm = TRUE)
#            smoothSds <- do.call(c, mclapply(clusterIdx, function(idx) {
#              smoothSd(rawSds[idx], k = k)
#            }, mc.cores = mc.cores))
#            scale <- sqrt(1/length(group1) + 1/length(group2))
#            tstat.sd <- smoothSds * scale
#          },
#          "same" = {
#            rawSds <- sqrt( ((length(group1) - 1) * rowVars(allPs[, group1, drop = FALSE]) +
#                               (length(group2) - 1) * rowVars(allPs[, group2, drop = FALSE])) /
#                              (length(group1) + length(group2) - 2))
#            smoothSds <- do.call(c, mclapply(clusterIdx, function(idx) {
#              smoothSd(rawSds[idx], k = k)
#            }, mc.cores = mc.cores))
#            scale <- sqrt(1/length(group1) + 1/length(group2))
#            tstat.sd <- smoothSds * scale
#          },
#          "paired" = {
#            rawSds <- rowSds(allPs[, group1, drop = FALSE] - allPs[, group2, drop = FALSE])
#            smoothSds <- do.call(c, mclapply(clusterIdx, function(idx) {
#              smoothSd(rawSds[idx], k = k)
#            }, mc.cores = mc.cores))
#            scale <- sqrt(1/length(group1))
#            tstat.sd <- smoothSds * scale
#          })
#   fstat <- (group1.means - group2.means) / tstat.sd
  is.na(fstat)[MS_w == 0] <- TRUE
  if(local.correct) {
    fstat.corrected <- do.call(c, mclapply(clusterIdx,
                                           compute.correction, qSd = qSd,
                                           mc.cores = mc.cores))
  }
  ptime2 <- proc.time()
  stime <- (ptime2 - ptime1)[3]
  if(verbose) cat(sprintf("done in %.1f sec\n", stime))
  
  if(local.correct) {
    stats <- cbind(SS_b, MS_b, eBayesSds, SS_w, MS_w,
                   fstat, fstat.corrected)
    colnames(stats) <- c("SS.between", "MS.between",
                         "eBayes.sd", "Smoothed.SS", "Smoothed.MSS", "fstat",
                         "fstat.corrected")
    
  } else {
    stats <- cbind(SS_b, MS_b, eBayesSds, SS_w, MS_w,
                   fstat)
    colnames(stats) <- c("SS.between", "MS.between",
                         "eBayes.sd", "Smoothed.SS", "Smoothed.MSS", "fstat")
  }
  
  parameters <- c(BSseq@parameters,
                  list(fstatText = sprintf("BSmooth.fstat (local.correct = %s, maxGap = %d)",
                                           local.correct, maxGap),
                        k = k, qSd = qSd,
                       local.correct = local.correct, maxGap = maxGap))
  out <- BSseqFstat(gr = granges(BSseq), stats = stats, parameters = parameters)
  out
}
