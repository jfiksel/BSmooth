BSmooth.fstat <- function(BSseq, groups, designMat, contrasts,
                          weights = NULL, maxGap = NULL, qSd = 0.75,
                          k = 101, mc.cores = 1, verbose = TRUE){
  smoothSd <- function(Sds, k) {
    k0 <- floor(k/2)
    if(all(is.na(Sds))) return(Sds)
    thresSD <- pmax(Sds, quantile(Sds, qSd, na.rm = TRUE), na.rm = TRUE)
    addSD <- rep(median(Sds, na.rm = TRUE), k0)
    sSds <- as.vector(runmean(Rle(c(addSD, thresSD, addSD)), k = k))
    sSds
  }
  compute.correction <- function(idx, qSd = 0.75) {
    xx <- start(BSseq)[idx]
    yy <- fstat[idx]
    suppressWarnings({
      drange <- diff(range(xx, na.rm = TRUE))
    })
    if(drange <= 25000)
      return(yy)
    fstat.function <- approxfun(xx, yy)
    xx.reg <- seq(from = min(xx), to = max(xx), by = 2000)
    yy.reg <- tstat.function(xx.reg)
    fit <- locfit(yy.reg ~ lp(xx.reg, h = 25000, deg = 2, nn = 0),
                  family = "huber", maxk = 50000) 
    correction <- predict(fit, newdata = data.frame(xx.reg = xx))
    yy - correction 
  }
  
  stopifnot(is(BSseq, "BSseq"))
  stopifnot(hasBeenSmoothed(BSseq))
  
  for(i in 1:length(groups)){
    if(is.character(groups[[i]])){
      stopifnot(all(groups[[i]] %in% sampleNames(BSseq)))
      groups[[i]] <- match(groups[[i]], sampleNames(BSseq))
    }
    if(is.numeric(groups[[i]])){
      group <- groups[[i]]
      stopifnot(min(group) >=1 & max(group) <= ncol(BSseq))
    }
    else{
      stop(paste("Problems with argument group", i))
    }
    
  }
  
  for(i in 1: (length(groups) - 1)){
    for(j in (i + 1):length(groups)){
      stopifnot(length(intersect(groups[[i]], groups[[j]])) == 0)
    }
  }
  
  for(i in 1:length(groups)){
    stopifnot(length(groups[[i]]) > 0)
  }
  
  n_i <- unlist((lapply(groups, function(x) length(x))))
  N <- sum(n_i)
  stopifnot(N >= length(groups) + 1)
  
  
  if(any(rowSums(getCoverage(BSseq)[, unlist(groups)]) == 0))
    warning("Computing t-statistics at locations where there is no data; consider subsetting the 'BSseq' object first")
  
  if(is.null(maxGap))
    maxGap <- BSseq@parameters$maxGap
  if(is.null(maxGap))
    stop("need to set argument 'maxGap'")
  
  if(verbose) cat("[BSmooth.fstat] preprocessing ... ")
  ptime1 <- proc.time()
  clusterIdx <- makeClusters(BSseq, maxGap = maxGap)
  ptime2 <- proc.time()
  stime <- (ptime2 - ptime1)[3]
  if(verbose) cat(sprintf("done in %.1f sec\n", stime))
  
  if(verbose) cat("[BSmooth.fstat] computing variation between groups ... ")
  ptime1 <- proc.time()
  allPs <- getMeth(BSseq, type = "smooth", what = "perBase",
                   confint = FALSE)
  
  meanMat <- do.call(cbind, lapply(groups, function(g) {
    rowMeans(allPs[, g])
  }))
  
  getSS_b <- function(groupMeans){
    GM <- sum(n_i * groupMeans) / N
    SS_b <- sum(n_i * (groupMeans - GM) ^ 2)
    SS_b
  }
  SS_b <- apply(meanMat, 1, getSS_b)
  MS_b <- SS_b/(length(groups) - 1)
  ptime2 <- proc.time()
  stime <- (ptime2 - ptime1)[3]
  if(verbose) cat(sprintf("done in %.1f sec\n", stime))
  
  if(verbose) cat("[BSmooth.fstat] computing variation within groups ... ")
  ptime1 <- proc.time()
  contrast.matrix <- makeContrasts(contrasts = contrasts, levels = design)
  fit <- lmFit(allPs, design, weights = weights)
  fit2 <- contrasts.fit(fit, contrast.matrix)
  fit2 <- eBayes(fit2, trend = T)
  
  rawSds <- fit2$sigma
  smoothSds <- do.call(c, mclapply(clusterIdx, function(idx) {
    smoothSd(rawSds[idx], k = k)
  }, mc.cores = mc.cores))
  MS_w <- smoothSds^2
  fstat <- MS_b/MS_w
  
  is.na(fstat)[MS_w == 0] <- TRUE
  
  ptime2 <- proc.time()
  stime <- (ptime2 - ptime1)[3]
  if(verbose) cat(sprintf("done in %.1f sec\n", stime))
  
  
  stats <- cbind(SS_b, MS_b, rawSds, MS_w,
                 fstat)
  colnames(stats) <- c("SS.between", "MS.between",
                       "Raw.SS", "Smoothed.MS", "fstat")
  
  
  parameters <- c(BSseq@parameters,
                  list(fstatText = sprintf("BSmooth.fstat (maxGap = %d)",
                                           maxGap),
                       k = k, qSd = qSd,
                       maxGap = maxGap))
  out <- BSseqFstat(gr = granges(BSseq), stats = stats, parameters = parameters)
  out
}
